{"version":3,"sources":["index.js"],"names":[],"mappings":"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","file":"entry.js","sourcesContent":["#!/usr/bin/env node\n'use strict';\n\nimport fs from 'fs';\nimport _ from 'lodash';\nimport moment from 'moment';\nimport csv from 'fast-csv';\nimport pjson from '../package.json';\n\nlet inputFile = process.argv[2] || false;\nlet outputFile = process.argv[3] || false;\n\nif (inputFile) {\n  // Lookup version number\n  if (inputFile === '-v' || inputFile === '-version' || inputFile === '--version') {\n    process.stdout.write(pjson.name + ' @ v' + pjson.version);\n    process.exit();\n  }\n\n  if (!outputFile) {\n    let tempArray = inputFile.split('.');\n    tempArray.splice(-1, 0, 'happy');\n    outputFile = tempArray.join('.');\n  }\n\n  let ws = fs.createWriteStream(outputFile);\n\n  // Constructor function\n  class HappyTime {\n    constructor() {\n      this.input = [];\n    }\n\n    start() {\n      // Read in CSV timesheet\n      csv\n        .fromPath(inputFile, {\n          ignoreEmpty: true,\n          delimiter: ';'\n        })\n        // As data come in from the read stream\n        .on('data', (data) => {\n          this.input.push(data);\n        })\n        // In case something goes wrong during the read\n        .on('error', (err) => {\n          process.stdout.write(`\n            Oh no! Something went wrong while reading the file.\n\n            Please make sure you specify a CSV file that is semi-colon (;) separated.\n\n            Details: ${err}`);\n          process.exit(1);\n        })\n        // When the whole stream has been read\n        .on('end', () => {\n          process.stdout.write(`\n            ${this.input.length} rows successfully read.\n\n            Processing...\n\n            ============================================\n\n            `);\n          this.outputCSV(this.processCSV(this.input));\n        });\n    }\n\n    parseHours(string) {\n      return parseInt((string.replace(',', '.') * 100), 10);\n    }\n\n    stringHours(hours) {\n      return (hours / 100).toString().replace('.', ',');\n    }\n\n    roundHours(hours) {\n      let segments = hours.split(',');\n      let rounded = hours;\n\n      if (segments[1]) {\n        if (segments[1][0] >= 9 || (segments[1][0] >= 8 && (segments[1][1] >= 3 || false))) {\n          rounded = (segments[0] * 1) + 1;\n        } else if (segments[1][0] >= 7 || (segments[1][0] >= 6 && (segments[1][1] >= 3 || false))) {\n          rounded = [ segments[0], 75 ].join(',');\n        } else if (segments[1][0] >= 4 || (segments[1][0] >= 3 && (segments[1][1] >= 3 || false))) {\n          rounded = [ segments[0], 5 ].join(',');\n        } else if (segments[1][0] >= 2 || (segments[1][0] >= 1 && (segments[1][1] >= 3 || false))) {\n          rounded = [ segments[0], 25 ].join(',');\n        } else {\n          rounded = segments[0];\n        }\n      }\n      return rounded;\n    }\n\n    rowToGrid(rows) {\n      this.uniqueProjects = _.uniq(_.pluck(rows, 0), false);\n      this.uniqueDates = _.uniq(_.pluck(rows, 2), false);\n      let mappedDates = _.map(this.uniqueDates, (date) => moment(date, 'YYYY-MM-DD'));\n      let minDate = _.min(mappedDates).format('YYYY-MM-DD');\n      let maxDate = _.max(mappedDates).format('YYYY-MM-DD');\n\n      let range = [];\n      let startDate = minDate;\n\n      while (startDate <= maxDate) {\n        range.push(startDate);\n        startDate = moment(startDate, 'YYYY-MM-DD').add(1, 'd').format('YYYY-MM-DD');\n      }\n\n      let columnHeaders = range;\n      columnHeaders.unshift('Project', 'Task');\n\n      let output = [];\n\n      this.uniqueProjects.forEach((project) => {\n        let projectRows = _.filter(rows, (row) => row[0] === project);\n        this.uniqueProjectTasks = _.uniq(_.pluck(projectRows, 1), false);\n\n        this.uniqueProjectTasks.forEach((task) => {\n          // Set all values to 0 so that empty cells can default to zero\n          let newRow = {};\n          columnHeaders.forEach((item) => {\n            newRow[item] = 0;\n          });\n\n          // Overwrite the Project and Task names\n          newRow.Project = project;\n          newRow.Task = task;\n          output.push(newRow);\n        });\n\n        // Sorted by date\n        let sortedRows = _.sortBy(projectRows, (row) => row[2]);\n\n        sortedRows.forEach((outer) => {\n          output = _.map(output, (inner, innerCount) => {\n            if (inner.Project === outer[0] && inner.Task === outer[1]) {\n              inner[outer[2]] = outer[4];\n            }\n            return inner;\n          });\n        });\n      });\n\n      let newOutput = _.map(output, (item) => _.values(item));\n\n      // Column Totals\n      let columnTotals = ['', ''];\n      _.forEach(range, (header, index) => {\n        if (index > 1) {\n          let columnValues = _.pluck(newOutput, index);\n          let columnTotal = _.reduce(columnValues, (one, two) => parseFloat(one.toString().replace(',', '.')) + parseFloat(two.toString().replace(',', '.')), 0);\n          columnTotals.push(columnTotal);\n        }\n      });\n      newOutput.push(_.map(columnTotals, (item) => item.toString().replace('.', ',')));\n\n      // Column Headers\n      newOutput.unshift(columnHeaders);\n      return newOutput;\n    }\n\n    processCSV(input) {\n      try {\n        // Remove headers\n        this.inputHeaders = input.shift();\n\n        // Get consistent data structure\n        let output1 = _.map(input, (row, count) => {\n          let newRow = [];\n          newRow.push(row[0]);  // Project\n          newRow.push(row[1]);  // Task\n          newRow.push(moment(row[2], 'YYYY/MM/DD, h:mm A').format('YYYY-MM-DD'));   // Date\n          newRow.push(row[4]);  // Hours\n          return newRow;\n        }).sort();\n\n        let output2 = [];\n        let project = '';\n        let task = '';\n        let date = '';\n        let hours = 0;\n        let taskIndex = 0;\n        let sameProject = false;\n        let sameTask = false;\n        let sameDay = false;\n        let hasTemp = false;\n\n        // Summarize task times\n        output1.forEach((row, count) => {\n          sameProject = project === row[0] ? true : false;\n          sameTask = task === row[1] ? true : false;\n          sameDay = date === row[2] ? true : false;\n\n          if ((!sameProject || !sameTask || !sameDay) && hasTemp) {\n            output2[ taskIndex - 1 ] = [ project, task, date, this.stringHours(hours), this.roundHours(this.stringHours(hours)) ];\n          }\n\n          project = sameProject ? project : row[0];\n          task = sameTask ? task : row[1];\n          date = sameDay ? date : row[2];\n          hours = sameDay && sameTask ? hours + this.parseHours(row[3]) : this.parseHours(row[3]);\n          hasTemp = true;\n\n          if (!sameProject || !sameTask || !sameDay) {\n            output2[taskIndex] = [ project, task, date, this.stringHours(hours), this.roundHours(this.stringHours(hours)) ];\n            taskIndex = output2.length;\n            hasTemp = false;\n          } else if (output1.length === count + 1) {\n            output2.push([ project, task, date, this.stringHours(hours), this.roundHours(this.stringHours(hours)) ]);\n            hasTemp = false;\n          }\n        });\n\n        return this.rowToGrid(output2);\n      } catch (e) {\n        let msg = `\n        Bummer! Something went wrong while processing your CSV.\n\n        Data expected in format:\n        ======================================================================================================================\n        PROJECT      | TASK                                          | START                 | END                    | HOURS\n        Project 87   | Calculate likelihood of snail race winners    | 2015/09/03, 5:16 PM   | 2015/09/03, 5:39 PM    |  0,38\n        ======================================================================================================================\n\n        ${e}`;\n        process.stdout.write(msg);\n      }\n    }\n\n    outputCSV(output) {\n      csv\n        .write(output, { delimiter: ';' })\n        .pipe(ws)\n        .on('finish', () => {\n          process.stdout.write(`Yay! Your timesheet is now happy.\n\n            $ open \"${outputFile}\"\n\n          `);\n          process.exit();\n        })\n        .on('error', (err) => {\n          process.stdout.write(`So close! Something went wrong while writing your CSV. ${err}`);\n          process.exit(1);\n        });\n    }\n  }\n\n  let ht = new HappyTime();\n  ht.start();\n} else {\n  process.stdout.write(`Whoops. Please specify an input file.`);\n  process.exit(1);\n}\n"],"sourceRoot":"/source/"}